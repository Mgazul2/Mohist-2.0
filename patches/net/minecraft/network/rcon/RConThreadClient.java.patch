--- ../src-base/minecraft/net/minecraft/network/rcon/RConThreadClient.java
+++ ../src-work/minecraft/net/minecraft/network/rcon/RConThreadClient.java
@@ -40,25 +40,20 @@
 
     public void run()
     {
-        while (true)
-        {
-            try
-            {
-                if (!this.running)
-                {
+        try {
+            while (true) {
+                if (!this.running || clientSocket == null) {
                     return;
                 }
 
                 BufferedInputStream bufferedinputstream = new BufferedInputStream(this.clientSocket.getInputStream());
                 int i = bufferedinputstream.read(this.buffer, 0, 1460);
 
-                if (10 <= i)
-                {
+                if (10 <= i) {
                     int j = 0;
                     int k = RConUtils.getBytesAsLEInt(this.buffer, 0, i);
 
-                    if (k != i - 4)
-                    {
+                    if (k != i - 4) {
                         return;
                     }
 
@@ -68,68 +63,58 @@
                     int i1 = RConUtils.getRemainingBytesAsLEInt(this.buffer, j);
                     j = j + 4;
 
-                    switch (i1)
-                    {
+                    switch (i1) {
                         case 2:
 
-                            if (this.loggedIn)
-                            {
+                            if (this.loggedIn) {
                                 String s1 = RConUtils.getBytesAsString(this.buffer, j, i);
 
-                                try
-                                {
+                                try {
                                     this.sendMultipacketResponse(l, this.server.handleRConCommand(s1));
-                                }
-                                catch (Exception exception)
-                                {
+                                } catch (Exception exception) {
                                     this.sendMultipacketResponse(l, "Error executing: " + s1 + " (" + exception.getMessage() + ")");
                                 }
 
-                                continue;
+                                break;
                             }
 
                             this.sendLoginFailedResponse();
-                            continue;
+                            break;
                         case 3:
                             String s = RConUtils.getBytesAsString(this.buffer, j, i);
                             int j1 = j + s.length();
 
-                            if (!s.isEmpty() && s.equals(this.rconPassword))
-                            {
+                            if (!s.isEmpty() && s.equals(this.rconPassword)) {
                                 this.loggedIn = true;
                                 this.sendResponse(l, 2, "");
-                                continue;
+                                break;
                             }
 
                             this.loggedIn = false;
                             this.sendLoginFailedResponse();
-                            continue;
+                            break;
                         default:
                             this.sendMultipacketResponse(l, String.format("Unknown request %s", Integer.toHexString(i1)));
-                            continue;
+                            break;
                     }
                 }
             }
-            catch (SocketTimeoutException var17)
-            {
-                return;
-            }
-            catch (IOException var18)
-            {
-                return;
-            }
-            catch (Exception exception1)
-            {
-                LOGGER.error("Exception whilst parsing RCON input", (Throwable)exception1);
-                return;
-            }
-            finally
-            {
-                this.closeSocket();
-            }
-
+        }
+        catch (SocketTimeoutException var17)
+        {
             return;
         }
+        catch (IOException var18)
+        {
+            return;
+        }
+        catch (Exception exception1)
+        {
+            LOGGER.error("Exception whilst parsing RCON input", (Throwable)exception1);
+        }
+        finally {
+            this.closeSocket();
+        }
     }
 
     private void sendResponse(int p_72654_1_, int p_72654_2_, String message) throws IOException
