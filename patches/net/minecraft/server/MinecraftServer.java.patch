--- ../src-base/minecraft/net/minecraft/server/MinecraftServer.java
+++ ../src-work/minecraft/net/minecraft/server/MinecraftServer.java
@@ -1,7 +1,14 @@
 package net.minecraft.server;
 
+import jline.console.ConsoleReader;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraftforge.common.util.EnumHelper;
+import net.minecraftforge.fml.common.FMLCommonHandler;
+import red.mohist.i18n.Message;
+import red.mohist.WatchMohist;
+import com.destroystokyo.paper.utils.CachedSizeConcurrentLinkedQueue;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Queues;
+import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.ListenableFutureTask;
@@ -13,29 +20,7 @@
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
 import io.netty.handler.codec.base64.Base64;
-import java.awt.GraphicsEnvironment;
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.net.Proxy;
-import java.net.URLEncoder;
-import java.nio.charset.StandardCharsets;
-import java.security.KeyPair;
-import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-import java.util.Queue;
-import java.util.Random;
-import java.util.UUID;
-import java.util.concurrent.Callable;
-import java.util.concurrent.Executors;
-import java.util.concurrent.FutureTask;
-import java.util.function.Supplier;
-import javax.annotation.Nullable;
-import javax.imageio.ImageIO;
+import joptsimple.OptionSet;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
 import net.minecraft.command.CommandBase;
@@ -55,53 +40,65 @@
 import net.minecraft.profiler.Profiler;
 import net.minecraft.profiler.Snooper;
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.PropertyManager;
 import net.minecraft.server.management.PlayerList;
 import net.minecraft.server.management.PlayerProfileCache;
-import net.minecraft.util.IProgressUpdate;
-import net.minecraft.util.IThreadListener;
-import net.minecraft.util.ITickable;
-import net.minecraft.util.ReportedException;
-import net.minecraft.util.Util;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.DataFixesManager;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
-import net.minecraft.world.EnumDifficulty;
-import net.minecraft.world.GameType;
-import net.minecraft.world.MinecraftException;
-import net.minecraft.world.ServerWorldEventHandler;
-import net.minecraft.world.World;
-import net.minecraft.world.WorldServer;
-import net.minecraft.world.WorldServerDemo;
-import net.minecraft.world.WorldServerMulti;
-import net.minecraft.world.WorldSettings;
-import net.minecraft.world.WorldType;
-import net.minecraft.world.chunk.storage.AnvilSaveConverter;
+import net.minecraft.world.*;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
 import net.minecraft.world.storage.ISaveFormat;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.WorldInfo;
+import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_12_R1.Main;
+import org.spigotmc.SlackActivityAccountant;
 
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import java.awt.*;
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.UnsupportedEncodingException;
+import java.net.Proxy;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.security.KeyPair;
+import java.text.SimpleDateFormat;
+import java.util.List;
+import java.util.Queue;
+import java.util.*;
+import java.util.concurrent.Callable;
+import java.util.concurrent.Executors;
+import java.util.concurrent.FutureTask;
+
 public abstract class MinecraftServer implements ICommandSender, Runnable, IThreadListener, ISnooperInfo
 {
-    private static final Logger LOGGER = LogManager.getLogger();
+    private static MinecraftServer SERVER;
+    public static final Logger LOGGER = LogManager.getLogger();
     public static final File USER_CACHE_FILE = new File("usercache.json");
-    private final ISaveFormat anvilConverterForAnvilFile;
+    public ISaveFormat anvilConverterForAnvilFile;
     private final Snooper usageSnooper = new Snooper("server", this, getCurrentTimeMillis());
-    private final File anvilFile;
+    public File anvilFile;
     private final List<ITickable> tickables = Lists.<ITickable>newArrayList();
     public final ICommandManager commandManager;
     public final Profiler profiler = new Profiler();
     private final NetworkSystem networkSystem;
     private final ServerStatusResponse statusResponse = new ServerStatusResponse();
     private final Random random = new Random();
-    private final DataFixer dataFixer;
+    public final DataFixer dataFixer;
     @SideOnly(Side.SERVER)
     private String hostname;
     private int serverPort = -1;
@@ -124,11 +121,10 @@
     private int maxPlayerIdleMinutes;
     public final long[] tickTimeArray = new long[100];
     //public long[][] timeOfLastDimensionTick;
-    public java.util.Hashtable<Integer, long[]> worldTickTimes = new java.util.Hashtable<Integer, long[]>();
+    public Hashtable<Integer, long[]> worldTickTimes = new Hashtable<Integer, long[]>();
     private KeyPair serverKeyPair;
     private String serverOwner;
     private String folderName;
-    @SideOnly(Side.CLIENT)
     private String worldName;
     private boolean isDemo;
     private boolean enableBonusChest;
@@ -144,26 +140,68 @@
     private final GameProfileRepository profileRepo;
     private final PlayerProfileCache profileCache;
     private long nanoTimeSinceStatusRefresh;
-    public final Queue < FutureTask<? >> futureTaskQueue = Queues. < FutureTask<? >> newArrayDeque();
+    public final Queue <FutureTask<?>> futureTaskQueue = new CachedSizeConcurrentLinkedQueue<>(); // Paper - Make size() constant-time
     private Thread serverThread;
-    protected long currentTime = getCurrentTimeMillis();
+    private long currentTime = getCurrentTimeMillis();
     @SideOnly(Side.CLIENT)
     private boolean worldIconSet;
+    // CraftBukkit start
+    public List<WorldServer> worldServerList = new ArrayList<>();
+    public org.bukkit.craftbukkit.v1_12_R1.CraftServer server;
+    public OptionSet options;
+    public org.bukkit.command.ConsoleCommandSender console;
+    public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+	public ConsoleReader reader;
+    public static int currentTick = (int) (System.currentTimeMillis() / 50);
+    public Thread primaryThread;
+    public Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    public int autosavePeriod;
+    // CraftBukkit end
+    // Spigot start
+    public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
+    // Spigot end
 
-    public MinecraftServer(File anvilFileIn, Proxy proxyIn, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
+    public MinecraftServer(OptionSet options, Proxy proxyIn, DataFixer dataFixerIn, YggdrasilAuthenticationService authServiceIn, MinecraftSessionService sessionServiceIn, GameProfileRepository profileRepoIn, PlayerProfileCache profileCacheIn)
     {
+        SERVER = this;
         this.serverProxy = proxyIn;
         this.authService = authServiceIn;
         this.sessionService = sessionServiceIn;
         this.profileRepo = profileRepoIn;
         this.profileCache = profileCacheIn;
-        this.anvilFile = anvilFileIn;
+        // this.anvilFile = anvilFileIn;
         this.networkSystem = new NetworkSystem(this);
         this.commandManager = this.createCommandManager();
-        this.anvilConverterForAnvilFile = new AnvilSaveConverter(anvilFileIn, dataFixerIn);
+        // this.anvilConverterForAnvilFile = new AnvilSaveConverter(anvilFileIn, dataFixerIn); // CraftBukkit - moved to DedicatedServer.init
         this.dataFixer = dataFixerIn;
+        this.options = options;
+        // Try to see if we're actually running in a terminal, disable jline if not
+        if (System.console() == null && System.getProperty("jline.terminal") == null) {
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            Main.useJline = false;
+        }
+        try {
+                        reader = new ConsoleReader(System.in, System.out);
+            reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+        }
+        catch (Throwable e) {
+            try {
+                System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+                System.setProperty("user.language", "en");
+                Main.useJline = false;
+                reader = new ConsoleReader(System.in, System.out);
+                reader.setExpandEvents(false);
+            }
+            catch (IOException ex) {
+                MinecraftServer.LOGGER.warn((String)null, (Throwable)ex);
+            }
+        }
+        Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.v1_12_R1.util.ServerShutdownThread(this));
+        this.serverThread = primaryThread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread"); // Moved from main
     }
 
+    public abstract PropertyManager getPropertyManager();
+
     public ServerCommandManager createCommandManager()
     {
         return new ServerCommandManager(this);
@@ -221,95 +259,91 @@
 
     public void loadAllWorlds(String saveName, String worldNameIn, long seed, WorldType type, String generatorOptions)
     {
+        ServerCommandManager vanillaCommandManager = (ServerCommandManager) this.getCommandManager();
+        vanillaCommandManager.registerVanillaCommands();
         this.convertMapIfNeeded(saveName);
         this.setUserMessage("menu.loadingLevel");
-        ISaveHandler isavehandler = this.anvilConverterForAnvilFile.getSaveLoader(saveName, true);
-        this.setResourcePackFromWorld(this.getFolderName(), isavehandler);
-        WorldInfo worldinfo = isavehandler.loadWorldInfo();
-        WorldSettings worldsettings;
 
-        if (worldinfo == null)
-        {
-            if (this.isDemo())
-            {
-                worldsettings = WorldServerDemo.DEMO_WORLD_SETTINGS;
-            }
-            else
-            {
-                worldsettings = new WorldSettings(seed, this.getGameType(), this.canStructuresSpawn(), this.isHardcore(), type);
-                worldsettings.setGeneratorOptions(generatorOptions);
+        WorldSettings worldsettings = new WorldSettings(seed, this.getGameType(), this.canStructuresSpawn(), this.isHardcore(), type);
+        worldsettings.setGeneratorOptions(generatorOptions);
+        WorldServer world;
 
-                if (this.enableBonusChest)
-                {
-                    worldsettings.enableBonusChest();
+        // WorldServer overWorld = (WorldServer)(isDemo() ? new WorldServerDemo(this, new AnvilSaveHandler(server.getWorldContainer(), worldNameIn , true, this.dataFixer), worldinfo, 0, profiler).init() : new WorldServer(this, new AnvilSaveHandler(server.getWorldContainer(), worldNameIn , true, this.dataFixer), worldinfo, 0, profiler).init());
+        // TODO: Reimplement this!
+        Integer[] dimIds = DimensionManager.getStaticDimensionIDs();
+        Arrays.sort(dimIds, new Comparator<Integer>() {
+            @Override
+            public int compare(Integer o1, Integer o2) {
+                // Zero-dimension must always be the first in array!
+                if (o1 == 0) {
+                    return -1;
+                } else {
+                    return Math.max(o1, o2);
                 }
             }
-
-            worldinfo = new WorldInfo(worldsettings, worldNameIn);
-        }
-        else
+        });
+        for (int dim : dimIds)
         {
-            worldinfo.setWorldName(worldNameIn);
-            worldsettings = new WorldSettings(worldinfo);
-        }
-
-        if (false) { //Forge Dead code, reimplemented below
-        for (int i = 0; i < this.worlds.length; ++i)
-        {
-            int j = 0;
-
-            if (i == 1)
-            {
-                j = -1;
+            // World validation
+            if (dim != 0) {
+                if ((dim == -1 && !this.getAllowNether()) || (dim == 1 && !server.getAllowEnd())) {
+                    continue;
+                }
             }
 
-            if (i == 2)
-            {
-                j = 1;
+            String worldType;
+            org.bukkit.World.Environment worldEnvironment = org.bukkit.World.Environment.getEnvironment(dim);
+            if (worldEnvironment == null) {
+                WorldProvider provider = DimensionManager.createProviderFor(dim);
+                worldType = provider.getClass().getSimpleName().toLowerCase();
+                worldType = worldType.replace("worldprovider", "");
+                worldType = worldType.replace("provider", "");
+                worldEnvironment = org.bukkit.World.Environment.getEnvironment(DimensionManager.getProviderType(dim).getId());
+            } else {
+                worldType = worldEnvironment.toString().toLowerCase();
             }
+            String name = (dim == 0) ? saveName : "DIM" + dim;
+            org.bukkit.generator.ChunkGenerator gen = null;
 
-            if (i == 0)
-            {
-                if (this.isDemo())
-                {
-                    this.worlds[i] = (WorldServer)(new WorldServerDemo(this, isavehandler, worldinfo, j, this.profiler)).init();
+            if (dim == 0) {
+                ISaveHandler idatamanager = new AnvilSaveHandler(server.getWorldContainer(), worldNameIn, true, this.dataFixer);
+                WorldInfo worlddata = idatamanager.loadWorldInfo();
+                if (worlddata == null) {
+                    worlddata = new WorldInfo(worldsettings, worldNameIn);
                 }
-                else
-                {
-                    this.worlds[i] = (WorldServer)(new WorldServer(this, isavehandler, worldinfo, j, this.profiler)).init();
+                worlddata.checkName(worldNameIn); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
+                if (this.isDemo()) {
+                    world = (WorldServer) (new WorldServerDemo(this, idatamanager, worlddata, dim, this.profiler)).init();
+                } else {
+                    world = (WorldServer) (new WorldServer(this, idatamanager, worlddata, dim, this.profiler, worldEnvironment, gen)).init();
                 }
 
-                this.worlds[i].initialize(worldsettings);
-            }
-            else
-            {
-                this.worlds[i] = (WorldServer)(new WorldServerMulti(this, isavehandler, j, this.worlds[0], this.profiler)).init();
-            }
+                world.initialize(worldsettings);
+                this.server.scoreboardManager = new org.bukkit.craftbukkit.v1_12_R1.scoreboard.CraftScoreboardManager(this, world.getScoreboard());
+            } else {
+                gen = this.server.getGenerator(name);
 
-            this.worlds[i].addEventListener(new ServerWorldEventHandler(this, this.worlds[i]));
-
-            if (!this.isSinglePlayer())
-            {
-                this.worlds[i].getWorldInfo().setGameType(this.getGameType());
+                ISaveHandler idatamanager = new AnvilSaveHandler(server.getWorldContainer(), name, true, this.dataFixer);
+                // world =, b0 to dimension, s1 to name, added Environment and gen
+                WorldInfo worlddata = idatamanager.loadWorldInfo();
+                if (worlddata == null) {
+                    worlddata = new WorldInfo(worldsettings, name);
+                }
+                worlddata.checkName(name); // CraftBukkit - Migration did not rewrite the level.dat; This forces 1.8 to take the last loaded world as respawn (in this case the end)
+                world = (WorldServer) new WorldServerMulti(this, idatamanager, dim, this.worlds[0], this.profiler, worlddata, worldEnvironment, gen).init();
             }
-        }
-        } //Forge: End dead code
-
-        WorldServer overWorld = (WorldServer)(isDemo() ? new WorldServerDemo(this, isavehandler, worldinfo, 0, profiler).init() : new WorldServer(this, isavehandler, worldinfo, 0, profiler).init());
-        overWorld.initialize(worldsettings);
-        for (int dim : net.minecraftforge.common.DimensionManager.getStaticDimensionIDs())
-        {
-            WorldServer world = (dim == 0 ? overWorld : (WorldServer)new WorldServerMulti(this, isavehandler, dim, overWorld, profiler).init());
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldInitEvent(world.getWorld()));
             world.addEventListener(new ServerWorldEventHandler(this, world));
 
             if (!this.isSinglePlayer())
             {
                 world.getWorldInfo().setGameType(this.getGameType());
             }
+            getPlayerList().setPlayerManager(worldServerList.toArray(new WorldServer[worldServerList.size()]));
             net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(world));
         }
 
-        this.playerList.setPlayerManager(new WorldServer[]{ overWorld });
+        this.playerList.setPlayerManager(this.worlds);
         this.setDifficultyForAllWorlds(this.getDifficulty());
         this.initialWorldChunkLoad();
     }
@@ -323,28 +357,37 @@
         int i1 = 0;
         this.setUserMessage("menu.generatingTerrain");
         int j1 = 0;
-        LOGGER.info("Preparing start region for level 0");
-        WorldServer worldserver = net.minecraftforge.common.DimensionManager.getWorld(j1);
-        BlockPos blockpos = worldserver.getSpawnPoint();
-        long k1 = getCurrentTimeMillis();
+        // CraftBukkit start - fire WorldLoadEvent and handle whether or not to keep the spawn in memory
+        for (int m = 0; m < worldServerList.size(); m++) {
+            WorldServer worldserver = this.worldServerList.get(m);
+            Object[] p = {m, String.valueOf(worldserver.getSeed())};
+            MinecraftServer.LOGGER.info(Message.getFormatString(Message.Mohist_Load_Map, p));
 
-        for (int l1 = -192; l1 <= 192 && this.isServerRunning(); l1 += 16)
-        {
-            for (int i2 = -192; i2 <= 192 && this.isServerRunning(); i2 += 16)
-            {
-                long j2 = getCurrentTimeMillis();
+            if (!worldserver.getWorld().getKeepSpawnInMemory()) {
+                continue;
+            }
 
-                if (j2 - k1 > 1000L)
-                {
-                    this.outputPercentRemaining("Preparing spawn area", i1 * 100 / 625);
-                    k1 = j2;
-                }
+            BlockPos blockposition = worldserver.getSpawnPoint();
+            long jk = getCurrentTimeMillis();
+            i = 0;
+            for (int l1 = -192; l1 <= 192 && this.isServerRunning(); l1 += 16) {
+                for (int i2 = -192; i2 <= 192 && this.isServerRunning(); i2 += 16) {
+                    long j2 = getCurrentTimeMillis();
 
-                ++i1;
-                worldserver.getChunkProvider().provideChunk(blockpos.getX() + l1 >> 4, blockpos.getZ() + i2 >> 4);
+                    if (j2 - jk > 1000L) {
+                        this.outputPercentRemaining(Message.getString(Message.Mohist_Load_Map_Spawn), i * 100 / 625);
+                        jk = j2;
+                    }
+                    ++i;
+                    worldserver.getChunkProvider().provideChunk(blockposition.getX() + l1 >> 4, blockposition.getZ() + i2 >> 4);
+                }
             }
         }
 
+        for (WorldServer world : this.worldServerList) {
+            this.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(world.getWorld()));
+        }
+
         this.clearCurrentTask();
     }
 
@@ -390,17 +433,19 @@
     {
         this.currentTask = null;
         this.percentDone = 0;
+        this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
+        WatchMohist.start(); // Mohist
     }
 
     public void saveAllWorlds(boolean isSilent)
     {
-        for (WorldServer worldserver : this.worlds)
+        for (WorldServer worldserver : this.worldServerList)
         {
             if (worldserver != null)
             {
                 if (!isSilent)
                 {
-                    LOGGER.info("Saving chunks for level '{}'/{}", worldserver.getWorldInfo().getWorldName(), worldserver.provider.getDimensionType().getName());
+                    LOGGER.info(Message.getFormatString(Message.save_chunks_level, new Object[] { worldserver.getWorldInfo().getWorldName(), worldserver.provider.getDimensionType().getName()}));
                 }
 
                 try
@@ -415,10 +460,23 @@
         }
     }
 
-    public void stopServer()
-    {
-        LOGGER.info("Stopping server");
+    private boolean hasStopped = false;
+    private final Object stopLock = new Object();
 
+    public void stopServer() throws MinecraftException
+    {
+        org.spigotmc.AsyncCatcher.enabled = false; // Spigot
+        // CraftBukkit start - prevent double stopping on multiple threads
+        synchronized(stopLock) {
+            if (hasStopped) return;
+            hasStopped = true;
+        }
+        // CraftBukkit end
+        LOGGER.info(Message.getString(Message.Mohist_Stop));
+        WatchMohist.stop(); // Mohist
+        if (this.server != null) {
+            this.server.disablePlugins();
+        }
         if (this.getNetworkSystem() != null)
         {
             this.getNetworkSystem().terminateEndpoints();
@@ -426,14 +484,15 @@
 
         if (this.playerList != null)
         {
-            LOGGER.info("Saving players");
+            LOGGER.info(Message.getString(Message.Mohist_Save_Players));
             this.playerList.saveAllPlayerData();
             this.playerList.removeAllPlayers();
+            try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
         }
 
         if (this.worlds != null)
         {
-            LOGGER.info("Saving worlds");
+            LOGGER.info(Message.getString(Message.Mohist_Save_Worlds));
 
             for (WorldServer worldserver : this.worlds)
             {
@@ -445,7 +504,8 @@
 
             this.saveAllWorlds(false);
 
-            for (WorldServer worldserver1 : this.worlds)
+            // CraftBukkit start - Handled in saveChunks
+            for (WorldServer worldserver1 : this.worldServerList)
             {
                 if (worldserver1 != null)
                 {
@@ -453,11 +513,12 @@
                     worldserver1.flush();
                 }
             }
+            // CraftBukkit end
 
             WorldServer[] tmp = worlds;
             for (WorldServer world : tmp)
             {
-                net.minecraftforge.common.DimensionManager.setWorld(world.provider.getDimension(), null, this);
+                DimensionManager.setWorld(world.provider.getDimension(), null, this);
             }
         }
 
@@ -467,6 +528,13 @@
         }
 
         CommandBase.setCommandListener(null); // Forge: fix MC-128561
+        // Spigot start
+        if (org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) {
+            Object[] p = {"usercache.json"};
+            LOGGER.info(Message.getFormatString(Message.Mohist_Save_Other, p));
+            this.profileCache.save();
+        }
+        // Spigot end
     }
 
     public boolean isServerRunning()
@@ -479,74 +547,127 @@
         this.serverRunning = false;
     }
 
+    private static final int TPS = 20;
+    private static final long SEC_IN_NANO = 1000000000;
+    public static final long TICK_TIME = SEC_IN_NANO / TPS;
+    private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
+    private static final int SAMPLE_INTERVAL = 20;
+    public final RollingAverage tps1 = new RollingAverage(60);
+    public final RollingAverage tps5 = new RollingAverage(60 * 5);
+    public final RollingAverage tps15 = new RollingAverage(60 * 15);
+    public double[] recentTps = new double[3];
+
+    public static class RollingAverage {
+        private final int size;
+        private long time;
+        private double total;
+        private int index = 0;
+        private final double[] samples;
+        private final long[] times;
+
+              RollingAverage(int size) {
+                  this.size = size;
+                  this.time = size * SEC_IN_NANO;
+                  this.total = TPS * SEC_IN_NANO * size;
+                  this.samples = new double[size];
+                  this.times = new long[size];
+                  for (int i = 0; i < size; i++) {
+                          this.samples[i] = TPS;
+                          this.times[i] = SEC_IN_NANO;
+                      }
+              }
+
+              public void add(double x, long t) {
+                  time -= times[index];
+                  total -= samples[index] * times[index];
+                  samples[index] = x;
+                  times[index] = t;
+                  time += t;
+                  total += x * t;
+                  if (++index == size) {
+                          index = 0;
+                      }
+              }
+
+              public double getAverage() {
+                  return total / time;
+              }
+    }
+
     public void run()
     {
         try
         {
             if (this.init())
             {
-                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStarted();
+                FMLCommonHandler.instance().handleServerStarted();
                 this.currentTime = getCurrentTimeMillis();
                 long i = 0L;
                 this.statusResponse.setServerDescription(new TextComponentString(this.motd));
                 this.statusResponse.setVersion(new ServerStatusResponse.Version("1.12.2", 340));
                 this.applyServerIconToResponse(this.statusResponse);
 
+                // Spigot start
+                Arrays.fill( recentTps, 20 );
+                long start = System.nanoTime(), lastTick = start - TICK_TIME, catchupTime = 0, curTime, wait, tickSection = start;
                 while (this.serverRunning)
                 {
-                    long k = getCurrentTimeMillis();
-                    long j = k - this.currentTime;
-
-                    if (j > 2000L && this.currentTime - this.timeOfLastWarning >= 15000L)
-                    {
-                        LOGGER.warn("Can't keep up! Did the system time change, or is the server overloaded? Running {}ms behind, skipping {} tick(s)", Long.valueOf(j), Long.valueOf(j / 50L));
-                        j = 2000L;
-                        this.timeOfLastWarning = this.currentTime;
+                    curTime = System.nanoTime();
+                    wait = TICK_TIME - (curTime - lastTick);
+                    if (wait > 0) {
+                        if (catchupTime < 2E6) {
+                            wait += Math.abs(catchupTime);
+                        } else if (wait < catchupTime) {
+                            catchupTime -= wait;
+                            wait = 0;
+                        } else {
+                            wait -= catchupTime;
+                            catchupTime = 0;
+                        }
                     }
-
-                    if (j < 0L)
-                    {
-                        LOGGER.warn("Time ran backwards! Did the system time change?");
-                        j = 0L;
+                    if (wait > 0) {
+                        Thread.sleep(wait / 1000000);
+                        curTime = System.nanoTime();
+                        wait = TICK_TIME - (curTime - lastTick);
                     }
 
-                    i += j;
-                    this.currentTime = k;
-
-                    if (this.worlds[0].areAllPlayersAsleep())
+                    catchupTime = Math.min(MAX_CATCHUP_BUFFER, catchupTime - wait);
+                    if ( ++MinecraftServer.currentTick % SAMPLE_INTERVAL == 0 )
                     {
-                        this.tick();
-                        i = 0L;
+                        final long diff = curTime - tickSection;
+                        double currentTps = 1E9 / diff * SAMPLE_INTERVAL;
+                        tps1.add(currentTps, diff);
+                        tps5.add(currentTps, diff);
+                        tps15.add(currentTps, diff);
+                        // Backwards compat with bad plugins
+                        recentTps[0] = tps1.getAverage();
+                        recentTps[1] = tps5.getAverage();
+                        recentTps[2] = tps15.getAverage();
+                        tickSection = curTime;
                     }
-                    else
-                    {
-                        while (i > 50L)
-                        {
-                            i -= 50L;
-                            this.tick();
-                        }
-                    }
+                    lastTick = curTime;
 
-                    Thread.sleep(Math.max(1L, 50L - i));
+                    this.tick();
                     this.serverIsRunning = true;
                 }
-                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStopping();
-                net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+                // Spigot end
+                FMLCommonHandler.instance().handleServerStopping();
+                FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
             }
             else
             {
-                net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+                FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
                 this.finalTick((CrashReport)null);
             }
         }
         catch (net.minecraftforge.fml.common.StartupQuery.AbortedException e)
         {
             // ignore silently
-            net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+            FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
         }
         catch (Throwable throwable1)
         {
-            LOGGER.error("Encountered an unexpected exception", throwable1);
+            LOGGER.error(Message.getString(Message.crash_report), throwable1);
             CrashReport crashreport = null;
 
             if (throwable1 instanceof ReportedException)
@@ -555,21 +676,21 @@
             }
             else
             {
-                crashreport = this.addServerInfoToCrashReport(new CrashReport("Exception in server tick loop", throwable1));
+                crashreport = this.addServerInfoToCrashReport(new CrashReport(Message.getString(Message.crash_report1), throwable1));
             }
 
             File file1 = new File(new File(this.getDataDirectory(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
 
             if (crashreport.saveToFile(file1))
             {
-                LOGGER.error("This crash report has been saved to: {}", (Object)file1.getAbsolutePath());
+                LOGGER.error(Message.getFormatString(Message.crash_report2, new Object[] { file1.getAbsolutePath()}));
             }
             else
             {
-                LOGGER.error("We were unable to save this crash report to disk.");
+                LOGGER.error(Message.getString(Message.crash_report3));
             }
 
-            net.minecraftforge.fml.common.FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
+            FMLCommonHandler.instance().expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.finalTick(crashreport);
         }
         finally
@@ -580,12 +701,23 @@
             }
             catch (Throwable throwable)
             {
-                LOGGER.error("Exception stopping the server", throwable);
+                LOGGER.error(Message.getString(Message.crash_report4), throwable);
+                FMLCommonHandler.instance().handleServerStopped();
+                this.serverStopped = true;
+                try {
+                    this.reader.getTerminal().restore();
+                }
+                catch (Exception ex) {}
+                this.systemExitNow();
             }
             finally
             {
-                net.minecraftforge.fml.common.FMLCommonHandler.instance().handleServerStopped();
+                FMLCommonHandler.instance().handleServerStopped();
                 this.serverStopped = true;
+                try {
+                    this.reader.getTerminal().restore();
+                }
+                catch (Exception ex2) {}
                 this.systemExitNow();
             }
         }
@@ -607,8 +739,11 @@
             try
             {
                 BufferedImage bufferedimage = ImageIO.read(file1);
-                Validate.validState(bufferedimage.getWidth() == 64, "Must be 64 pixels wide");
-                Validate.validState(bufferedimage.getHeight() == 64, "Must be 64 pixels high");
+                int i = 64;
+                //photo's wide and high(unit: pixels )
+                Object[] p = {i};
+                Validate.validState(bufferedimage.getWidth() == i, Message.getFormatString(Message.error_load_icon_wide,p));
+                Validate.validState(bufferedimage.getHeight() == i, Message.getFormatString(Message.error_load_icon_high,p));
                 ImageIO.write(bufferedimage, "PNG", new ByteBufOutputStream(bytebuf));
                 ByteBuf bytebuf1 = Base64.encode(bytebuf);
                 response.setFavicon("data:image/png;base64," + bytebuf1.toString(StandardCharsets.UTF_8));
@@ -616,7 +751,7 @@
             }
             catch (Exception exception)
             {
-                LOGGER.error("Couldn't load server icon", (Throwable)exception);
+                LOGGER.error(Message.getString(Message.error_load_icon), (Throwable)exception);
             }
             finally
             {
@@ -654,7 +789,7 @@
     public void tick()
     {
         long i = System.nanoTime();
-        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreServerTick();
+        FMLCommonHandler.instance().onPreServerTick();
         ++this.tickCounter;
 
         if (this.startProfiling)
@@ -683,8 +818,7 @@
             this.statusResponse.getPlayers().setPlayers(agameprofile);
             this.statusResponse.invalidateJson();
         }
-
-        if (this.tickCounter % 900 == 0)
+        if (autosavePeriod > 0 && this.tickCounter % autosavePeriod == 0) // CraftBukkit
         {
             this.profiler.startSection("save");
             this.playerList.saveAllPlayerData();
@@ -692,6 +826,7 @@
             this.profiler.endSection();
         }
 
+
         this.profiler.startSection("tallying");
         this.tickTimeArray[this.tickCounter % 100] = System.nanoTime() - i;
         this.profiler.endSection();
@@ -709,47 +844,55 @@
 
         this.profiler.endSection();
         this.profiler.endSection();
-        net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostServerTick();
+        FMLCommonHandler.instance().onPostServerTick();
+        WatchMohist.update(); // Mohist
     }
 
     public void updateTimeLightAndEntities()
     {
+        this.server.getScheduler().mainThreadHeartbeat(this.tickCounter); // CraftBukkit
         this.profiler.startSection("jobs");
 
-        synchronized (this.futureTaskQueue)
-        {
-            while (!this.futureTaskQueue.isEmpty())
-            {
-                Util.runTask(this.futureTaskQueue.poll(), LOGGER);
-            }
-        }
+        // Spigot start
+        FutureTask<?> entry;
+        int count = this.futureTaskQueue.size();
+        while (count-- > 0 && (entry = this.futureTaskQueue.poll()) != null) {
+            Util.runTask(entry, MinecraftServer.LOGGER);
+         }
+        // Spigot end
 
         this.profiler.endStartSection("levels");
+        // CraftBukkit start
+        // Run tasks that are waiting on processing
+        while (!processQueue.isEmpty()) {
+            processQueue.remove().run();
+        }
+
+        org.bukkit.craftbukkit.v1_12_R1.chunkio.ChunkIOExecutor.tick();
+
+        // Send time updates to everyone, it will get the right time from the world the player is in.
+        if (this.tickCounter % 20 == 0) {
+            for (int i = 0; i < this.getPlayerList().getPlayers().size(); ++i) {
+                EntityPlayerMP entityplayer = (EntityPlayerMP) this.getPlayerList().getPlayers().get(i);
+                entityplayer.connection.sendPacket(new SPacketTimeUpdate(entityplayer.world.getTotalWorldTime(), entityplayer.getPlayerTime(), entityplayer.world.getGameRules().getBoolean("doDaylightCycle"))); // Add support for per player time
+            }
+        }
         net.minecraftforge.common.chunkio.ChunkIOExecutor.tick();
 
-        Integer[] ids = net.minecraftforge.common.DimensionManager.getIDs(this.tickCounter % 200 == 0);
-        for (int x = 0; x < ids.length; x++)
+        for (int x = 0; x < worldServerList.size(); x++)
         {
-            int id = ids[x];
             long i = System.nanoTime();
 
-            if (id == 0 || this.getAllowNether())
+            WorldServer worldserver = worldServerList.get(x);
+            int id = worldserver.dimension;
+
+            this.profiler.func_194340_a(() ->
             {
-                WorldServer worldserver = net.minecraftforge.common.DimensionManager.getWorld(id);
-                this.profiler.func_194340_a(() ->
-                {
-                    return worldserver.getWorldInfo().getWorldName();
-                });
+                return worldserver.getWorldInfo().getWorldName();
+            });
 
-                if (this.tickCounter % 20 == 0)
-                {
-                    this.profiler.startSection("timeSync");
-                    this.playerList.sendPacketToAllPlayersInDimension(new SPacketTimeUpdate(worldserver.getTotalWorldTime(), worldserver.getWorldTime(), worldserver.getGameRules().getBoolean("doDaylightCycle")), worldserver.provider.getDimension());
-                    this.profiler.endSection();
-                }
-
                 this.profiler.startSection("tick");
-                net.minecraftforge.fml.common.FMLCommonHandler.instance().onPreWorldTick(worldserver);
+                FMLCommonHandler.instance().onPreWorldTick(worldserver);
 
                 try
                 {
@@ -773,19 +916,18 @@
                     throw new ReportedException(crashreport1);
                 }
 
-                net.minecraftforge.fml.common.FMLCommonHandler.instance().onPostWorldTick(worldserver);
+                FMLCommonHandler.instance().onPostWorldTick(worldserver);
                 this.profiler.endSection();
                 this.profiler.startSection("tracker");
                 worldserver.getEntityTracker().tick();
                 this.profiler.endSection();
                 this.profiler.endSection();
-            }
+                worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
 
-            worldTickTimes.get(id)[this.tickCounter % 100] = System.nanoTime() - i;
+                worldTickTimes.get(id)[this.tickCounter % 100] = System.nanoTime() - i;
         }
 
         this.profiler.endStartSection("dim_unloading");
-        net.minecraftforge.common.DimensionManager.unloadWorlds(worldTickTimes);
         this.profiler.endStartSection("connection");
         this.getNetworkSystem().networkTick();
         this.profiler.endStartSection("players");
@@ -809,9 +951,11 @@
 
     public void startServerThread()
     {
+        /* CraftBukkit start - prevent abuse
         net.minecraftforge.fml.common.StartupQuery.reset();
         this.serverThread = new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread");
         this.serverThread.start();
+        // CraftBukkit end */
     }
 
     public File getFile(String fileName)
@@ -826,15 +970,20 @@
 
     public WorldServer getWorld(int dimension)
     {
-        WorldServer ret = net.minecraftforge.common.DimensionManager.getWorld(dimension, true);
+        WorldServer ret = DimensionManager.getWorld(dimension, true);
         if (ret == null)
         {
-            net.minecraftforge.common.DimensionManager.initDimension(dimension);
-            ret = net.minecraftforge.common.DimensionManager.getWorld(dimension);
+            DimensionManager.initDimension(dimension);
+            ret = DimensionManager.getWorld(dimension);
         }
         return ret;
     }
 
+    public WorldServer getWorldServer(int i) {
+        WorldServer world = getWorld(i);
+        return world != null ? world : worlds[0];
+    }
+
     public String getMinecraftVersion()
     {
         return "1.12.2";
@@ -862,7 +1011,8 @@
 
     public String getServerModName()
     {
-        return net.minecraftforge.fml.common.FMLCommonHandler.instance().getModName();
+        // TODO: Should we change this for CraftBukkit's server name?
+        return FMLCommonHandler.instance().getModName();
     }
 
     public CrashReport addServerInfoToCrashReport(CrashReport report)
@@ -891,7 +1041,7 @@
 
     public List<String> getTabCompletions(ICommandSender sender, String input, @Nullable BlockPos pos, boolean hasTargetBlock)
     {
-        List<String> list = Lists.<String>newArrayList();
+        Set<String> completionsSet = Sets.newHashSet(server.tabComplete(sender, input, pos, hasTargetBlock));
         boolean flag = input.startsWith("/");
 
         if (flag)
@@ -908,11 +1058,9 @@
             {
                 if (CommandBase.doesStringStartWith(s2, s1))
                 {
-                    list.add(s1);
+                    completionsSet.add(s1);
                 }
             }
-
-            return list;
         }
         else
         {
@@ -925,22 +1073,24 @@
                 {
                     if (flag1 && !hasTargetBlock)
                     {
-                        list.add("/" + s);
+                        completionsSet.add("/" + s);
                     }
                     else
                     {
-                        list.add(s);
+                        completionsSet.add(s);
                     }
                 }
             }
-
-            return list;
         }
+        List<String> finalCompletionsList = new ArrayList<>(completionsSet);
+        Collections.sort(finalCompletionsList);
+        return finalCompletionsList;
     }
 
     public boolean isAnvilFileSet()
     {
-        return this.anvilFile != null;
+        // return this.anvilFile != null;
+        return true; // CraftBukkit
     }
 
     public String getName()
@@ -958,6 +1108,11 @@
         return true;
     }
 
+    public boolean canUseCommand(int permLevel, String commandName, String perm)
+    {
+        return true;
+    }
+
     public ICommandManager getCommandManager()
     {
         return this.commandManager;
@@ -993,13 +1148,11 @@
         this.folderName = name;
     }
 
-    @SideOnly(Side.CLIENT)
     public void setWorldName(String worldNameIn)
     {
         this.worldName = worldNameIn;
     }
 
-    @SideOnly(Side.CLIENT)
     public String getWorldName()
     {
         return this.worldName;
@@ -1012,7 +1165,7 @@
 
     public void setDifficultyForAllWorlds(EnumDifficulty difficulty)
     {
-        for (WorldServer worldserver1 : this.worlds)
+        for (WorldServer worldserver1 : this.worldServerList)
         {
             if (worldserver1 != null)
             {
@@ -1094,9 +1247,9 @@
         playerSnooper.addClientStat("avg_tick_ms", Integer.valueOf((int)(MathHelper.average(this.tickTimeArray) * 1.0E-6D)));
         int l = 0;
 
-        if (this.worlds != null)
+        if (this.worldServerList != null)
         {
-            for (WorldServer worldserver1 : this.worlds)
+            for (WorldServer worldserver1 : this.worldServerList)
             {
                 if (worldserver1 != null)
                 {
@@ -1134,7 +1287,8 @@
 
     public boolean isServerInOnlineMode()
     {
-        return this.onlineMode;
+        // return this.onlineMode;
+        return server.getOnlineMode(); // CraftBukkit
     }
 
     public void setOnlineMode(boolean online)
@@ -1228,7 +1382,7 @@
 
     public void setGameType(GameType gameMode)
     {
-        for (WorldServer worldserver1 : this.worlds)
+        for (WorldServer worldserver1 : this.worldServerList)
         {
             worldserver1.getWorldInfo().setGameType(gameMode);
         }
@@ -1331,7 +1485,7 @@
     @Nullable
     public Entity getEntityFromUuid(UUID uuid)
     {
-        for (WorldServer worldserver1 : this.worlds)
+        for (WorldServer worldserver1 : this.worldServerList)
         {
             if (worldserver1 != null)
             {
@@ -1357,6 +1511,11 @@
         return this;
     }
 
+    public static MinecraftServer getServerInst()
+    {
+        return SERVER;
+    }
+
     public int getMaxWorldSize()
     {
         return 29999984;
@@ -1366,15 +1525,14 @@
     {
         Validate.notNull(callable);
 
-        if (!this.isCallingFromMinecraftThread() && !this.isServerStopped())
+        if (!this.isCallingFromMinecraftThread()/* && !this.isServerStopped()*/) // CraftBukkit
         {
             ListenableFutureTask<V> listenablefuturetask = ListenableFutureTask.<V>create(callable);
 
-            synchronized (this.futureTaskQueue)
-            {
-                this.futureTaskQueue.add(listenablefuturetask);
-                return listenablefuturetask;
-            }
+            // Spigot start
+            this.futureTaskQueue.add(listenablefuturetask);
+            return listenablefuturetask;
+            // Spigot end
         }
         else
         {
@@ -1455,134 +1613,50 @@
     }
 
     @SideOnly(Side.SERVER)
-    public static void main(String[] p_main_0_)
+    public static void main(String[] args)
     {
+        OptionSet options = Main.main(args);
+        if (options == null)
+            return;
         //Forge: Copied from DedicatedServer.init as to run as early as possible, Old code left in place intentionally.
         //Done in good faith with permission: https://github.com/MinecraftForge/MinecraftForge/issues/3659#issuecomment-390467028
         ServerEula eula = new ServerEula(new File("eula.txt"));
         if (!eula.hasAcceptedEULA())
         {
-            LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            LOGGER.info(Message.getString(Message.EULA));
             eula.createEULAFile();
             return;
         }
-
         Bootstrap.register();
-
         try
         {
-            boolean flag = true;
-            String s = null;
             String s1 = ".";
-            String s2 = null;
-            boolean flag1 = false;
-            boolean flag2 = false;
-            int l = -1;
-
-            for (int i1 = 0; i1 < p_main_0_.length; ++i1)
-            {
-                String s3 = p_main_0_[i1];
-                String s4 = i1 == p_main_0_.length - 1 ? null : p_main_0_[i1 + 1];
-                boolean flag3 = false;
-
-                if (!"nogui".equals(s3) && !"--nogui".equals(s3))
-                {
-                    if ("--port".equals(s3) && s4 != null)
-                    {
-                        flag3 = true;
-
-                        try
-                        {
-                            l = Integer.parseInt(s4);
-                        }
-                        catch (NumberFormatException var13)
-                        {
-                            ;
-                        }
-                    }
-                    else if ("--singleplayer".equals(s3) && s4 != null)
-                    {
-                        flag3 = true;
-                        s = s4;
-                    }
-                    else if ("--universe".equals(s3) && s4 != null)
-                    {
-                        flag3 = true;
-                        s1 = s4;
-                    }
-                    else if ("--world".equals(s3) && s4 != null)
-                    {
-                        flag3 = true;
-                        s2 = s4;
-                    }
-                    else if ("--demo".equals(s3))
-                    {
-                        flag1 = true;
-                    }
-                    else if ("--bonusChest".equals(s3))
-                    {
-                        flag2 = true;
-                    }
-                }
-                else
-                {
-                    flag = false;
-                }
-
-                if (flag3)
-                {
-                    ++i1;
-                }
-            }
-
-            YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
+            YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString()); // Paper
             MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
             GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
             PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(s1, USER_CACHE_FILE.getName()));
-            final DedicatedServer dedicatedserver = new DedicatedServer(new File(s1), DataFixesManager.createFixer(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
+            final DedicatedServer dedicatedserver = new DedicatedServer(options, DataFixesManager.createFixer(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache);
 
-            if (s != null)
-            {
-                dedicatedserver.setServerOwner(s);
+            if (options.has("port")) {
+                int port = (Integer) options.valueOf("port");
+                if (port > 0) {
+                    dedicatedserver.setServerPort(port);
+                }
             }
 
-            if (s2 != null)
-            {
-                dedicatedserver.setFolderName(s2);
+            if (options.has("universe")) {
+                dedicatedserver.anvilFile = (File) options.valueOf("universe");
             }
 
-            if (l >= 0)
-            {
-                dedicatedserver.setServerPort(l);
+            if (options.has("world")) {
+                dedicatedserver.setWorldName((String) options.valueOf("world"));
             }
 
-            if (flag1)
-            {
-                dedicatedserver.setDemo(true);
-            }
-
-            if (flag2)
-            {
-                dedicatedserver.canCreateBonusChest(true);
-            }
-
-            if (flag && !GraphicsEnvironment.isHeadless())
-            {
-                dedicatedserver.setGuiEnabled();
-            }
-
-            dedicatedserver.startServerThread();
-            Runtime.getRuntime().addShutdownHook(new Thread("Server Shutdown Thread")
-            {
-                public void run()
-                {
-                    dedicatedserver.stopServer();
-                }
-            });
+            dedicatedserver.primaryThread.start();
         }
         catch (Exception exception)
         {
-            LOGGER.fatal("Failed to start the minecraft server", (Throwable)exception);
+            LOGGER.fatal(Message.getString(Message.Mohist_Start_Fail), (Throwable)exception);
         }
     }
 
@@ -1595,7 +1669,8 @@
     @SideOnly(Side.SERVER)
     public boolean isDebuggingEnabled()
     {
-        return false;
+        // return false;
+        return this.getPropertyManager().getBooleanProperty("debug", false); // CraftBukkit - don't hardcode
     }
 
     @SideOnly(Side.SERVER)
