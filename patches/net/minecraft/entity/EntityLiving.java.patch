--- ../src-base/minecraft/net/minecraft/entity/EntityLiving.java
+++ ../src-work/minecraft/net/minecraft/entity/EntityLiving.java
@@ -1,32 +1,20 @@
 package net.minecraft.entity;
 
 import com.google.common.collect.Maps;
-import java.util.Arrays;
-import java.util.Map;
-import java.util.Random;
-import java.util.UUID;
-import javax.annotation.Nullable;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.enchantment.EnchantmentHelper;
-import net.minecraft.entity.ai.EntityAITasks;
-import net.minecraft.entity.ai.EntityJumpHelper;
-import net.minecraft.entity.ai.EntityLookHelper;
-import net.minecraft.entity.ai.EntityMoveHelper;
-import net.minecraft.entity.ai.EntitySenses;
+import net.minecraft.entity.ai.*;
 import net.minecraft.entity.ai.attributes.AttributeModifier;
 import net.minecraft.entity.item.EntityBoat;
 import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityGhast;
 import net.minecraft.entity.monster.IMob;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.inventory.EntityEquipmentSlot;
-import net.minecraft.item.Item;
-import net.minecraft.item.ItemArmor;
-import net.minecraft.item.ItemBow;
-import net.minecraft.item.ItemStack;
-import net.minecraft.item.ItemSword;
+import net.minecraft.item.*;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagFloat;
 import net.minecraft.nbt.NBTTagList;
@@ -37,13 +25,7 @@
 import net.minecraft.pathfinding.PathNavigate;
 import net.minecraft.pathfinding.PathNavigateGround;
 import net.minecraft.pathfinding.PathNodeType;
-import net.minecraft.util.DamageSource;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.EnumHandSide;
-import net.minecraft.util.EnumParticleTypes;
-import net.minecraft.util.NonNullList;
-import net.minecraft.util.ResourceLocation;
-import net.minecraft.util.SoundEvent;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.FixTypes;
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
@@ -57,7 +39,20 @@
 import net.minecraft.world.storage.loot.LootTable;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityPickupItemEvent;
+import org.bukkit.event.entity.EntityTargetEvent;
+import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
+import org.bukkit.event.entity.EntityUnleashEvent;
 
+import javax.annotation.Nullable;
+import java.util.Arrays;
+import java.util.Map;
+import java.util.Random;
+import java.util.UUID;
+
 public abstract class EntityLiving extends EntityLivingBase
 {
     private static final DataParameter<Byte> AI_FLAGS = EntityDataManager.<Byte>createKey(EntityLiving.class, DataSerializers.BYTE);
@@ -68,16 +63,16 @@
     protected EntityJumpHelper jumpHelper;
     private final EntityBodyHelper bodyHelper;
     protected PathNavigate navigator;
-    public final EntityAITasks tasks;
-    public final EntityAITasks targetTasks;
+    public EntityAITasks tasks;
+    public EntityAITasks targetTasks;
     private EntityLivingBase attackTarget;
     private final EntitySenses senses;
     private final NonNullList<ItemStack> inventoryHands = NonNullList.<ItemStack>withSize(2, ItemStack.EMPTY);
-    protected float[] inventoryHandsDropChances = new float[2];
+    public float[] inventoryHandsDropChances = new float[2];
     private final NonNullList<ItemStack> inventoryArmor = NonNullList.<ItemStack>withSize(4, ItemStack.EMPTY);
-    protected float[] inventoryArmorDropChances = new float[4];
-    private boolean canPickUpLoot;
-    private boolean persistenceRequired;
+    public float[] inventoryArmorDropChances = new float[4];
+    // private boolean canPickUpLoot; // CraftBukkit - moved up to EntityLivingBase
+    public boolean persistenceRequired;
     private final Map<PathNodeType, Float> mapPathPriority = Maps.newEnumMap(PathNodeType.class);
     private ResourceLocation deathLootTable;
     private long deathLootTableSeed;
@@ -171,8 +166,37 @@
     {
         this.attackTarget = entitylivingbaseIn;
         net.minecraftforge.common.ForgeHooks.onLivingSetAttackTarget(this, entitylivingbaseIn);
+        // CraftBukkit start - fire event
+        setGoalTarget(entitylivingbaseIn, EntityTargetEvent.TargetReason.UNKNOWN, true);
     }
 
+    public boolean setGoalTarget(@Nullable EntityLivingBase entityliving, EntityTargetEvent.TargetReason reason, boolean fireEvent) {
+        if (getAttackTarget() == entityliving) return false;
+        if (fireEvent) {
+            if (reason == EntityTargetEvent.TargetReason.UNKNOWN && getAttackTarget() != null && entityliving == null) {
+                reason = getAttackTarget().isEntityAlive() ? EntityTargetEvent.TargetReason.FORGOT_TARGET : EntityTargetEvent.TargetReason.TARGET_DIED;
+            }
+            CraftLivingEntity ctarget = null;
+            if (entityliving != null) {
+                ctarget = (CraftLivingEntity) entityliving.getBukkitEntity();
+            }
+            EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(this.getBukkitEntity(), ctarget, reason);
+            world.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return false;
+            }
+
+            if (event.getTarget() != null) {
+                entityliving = ((CraftLivingEntity) event.getTarget()).getHandle();
+            } else {
+                entityliving = null;
+            }
+        }
+        this.attackTarget = entityliving;
+        return true;
+        // CraftBukkit end
+    }
+
     public boolean canAttackClass(Class <? extends EntityLivingBase > cls)
     {
         return cls != EntityGhast.class;
@@ -447,12 +471,21 @@
     {
         super.readEntityFromNBT(compound);
 
+        // CraftBukkit start - If looting or persistence is false only use it if it was set after we started using it
         if (compound.hasKey("CanPickUpLoot", 1))
         {
-            this.setCanPickUpLoot(compound.getBoolean("CanPickUpLoot"));
+            // this.setCanPickUpLoot(compound.getBoolean("CanPickUpLoot"));
+            boolean data = compound.getBoolean("CanPickUpLoot");
+            if (isLevelAtLeast(compound, 1) || data) {
+                this.setCanPickUpLoot(data);
+            }
         }
 
-        this.persistenceRequired = compound.getBoolean("PersistenceRequired");
+        // this.persistenceRequired = compound.getBoolean("PersistenceRequired");
+        boolean data = compound.getBoolean("PersistenceRequired");
+        if (isLevelAtLeast(compound, 1) || data) {
+            this.persistenceRequired = data;
+        }
 
         if (compound.hasKey("ArmorItems", 9))
         {
@@ -653,8 +686,14 @@
             }
         }
 
-        if (flag && this.canEquipItem(itemstack))
-        {
+        // if (flag && this.canEquipItem(itemstack)) {
+        boolean canPickup = flag && this.canEquipItem(itemstack);
+
+        EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((LivingEntity) getBukkitEntity(), (org.bukkit.entity.Item) itemEntity.getBukkitEntity(), 0);
+        entityEvent.setCancelled(!canPickup);
+        this.world.getServer().getPluginManager().callEvent(entityEvent);
+        canPickup = !entityEvent.isCancelled();
+        if (canPickup) {
             double d0;
 
             switch (entityequipmentslot.getSlotType())
@@ -671,7 +710,9 @@
 
             if (!itemstack1.isEmpty() && (double)(this.rand.nextFloat() - 0.1F) < d0)
             {
+                this.forceDrops = true;
                 this.entityDropItem(itemstack1, 0.0F);
+                this.forceDrops = false;
             }
 
             this.setItemStackToSlot(entityequipmentslot, itemstack);
@@ -696,7 +737,7 @@
         return true;
     }
 
-    protected boolean canDespawn()
+    public boolean canDespawn()
     {
         return true;
     }
@@ -722,9 +763,9 @@
         else
         {
             Entity entity = this.world.getClosestPlayerToEntity(this, -1.0D);
-
+			
             if (entity != null)
-            {
+			{
                 double d0 = entity.posX - this.posX;
                 double d1 = entity.posY - this.posY;
                 double d2 = entity.posZ - this.posZ;
@@ -753,6 +794,12 @@
         this.world.profiler.startSection("checkDespawn");
         this.despawnEntity();
         this.world.profiler.endSection();
+        // Spigot Start
+        if (this.fromMobSpawner)
+        {
+            return;
+        }
+        // Spigot End
         this.world.profiler.startSection("sensing");
         this.senses.clearSensingCache();
         this.world.profiler.endSection();
@@ -1192,12 +1239,12 @@
 
     public boolean canPickUpLoot()
     {
-        return this.canPickUpLoot;
+        return super.canPickUpLoot;
     }
 
     public void setCanPickUpLoot(boolean canPickup)
     {
-        this.canPickUpLoot = canPickup;
+        super.canPickUpLoot = canPickup;
     }
 
     public boolean isNoDespawnRequired()
@@ -1209,6 +1256,10 @@
     {
         if (this.getLeashed() && this.getLeashHolder() == player)
         {
+            if (CraftEventFactory.callPlayerUnleashEntityEvent(this, player).isCancelled()) {
+                ((EntityPlayerMP) player).connection.sendPacket(new SPacketEntityAttach(this, this.getLeashHolder()));
+                return false;
+            }
             this.clearLeashed(true, !player.capabilities.isCreativeMode);
             return true;
         }
@@ -1218,6 +1269,10 @@
 
             if (itemstack.getItem() == Items.LEAD && this.canBeLeashedTo(player))
             {
+                if (CraftEventFactory.callPlayerLeashEntityEvent(this, player, player).isCancelled()) {
+                    ((EntityPlayerMP) player).connection.sendPacket(new SPacketEntityAttach(this, this.getLeashHolder()));
+                    return false;
+                }
                 this.setLeashHolder(player, true);
                 itemstack.shrink(1);
                 return true;
@@ -1245,11 +1300,13 @@
         {
             if (!this.isEntityAlive())
             {
+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.PLAYER_UNLEASH));
                 this.clearLeashed(true, true);
             }
 
             if (this.leashHolder == null || this.leashHolder.isDead)
             {
+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.HOLDER_GONE));
                 this.clearLeashed(true, true);
             }
         }
@@ -1264,7 +1321,9 @@
 
             if (!this.world.isRemote && dropLead)
             {
+                this.forceDrops = true;
                 this.dropItem(Items.LEAD, 1);
+                this.forceDrops = false;
             }
 
             if (!this.world.isRemote && sendPacket && this.world instanceof WorldServer)
@@ -1348,6 +1407,7 @@
             }
             else
             {
+                this.world.getServer().getPluginManager().callEvent(new EntityUnleashEvent(this.getBukkitEntity(), EntityUnleashEvent.UnleashReason.UNKNOWN));
                 this.clearLeashed(false, true);
             }
         }
@@ -1448,7 +1508,6 @@
         ON_GROUND,
         IN_AIR,
         IN_WATER;
-
         private final java.util.function.BiPredicate<net.minecraft.world.IBlockAccess, BlockPos> spawnPredicate;
 
         SpawnPlacementType() { this.spawnPredicate = null; }
