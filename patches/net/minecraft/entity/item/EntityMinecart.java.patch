--- ../src-base/minecraft/net/minecraft/entity/item/EntityMinecart.java
+++ ../src-work/minecraft/net/minecraft/entity/item/EntityMinecart.java
@@ -1,9 +1,6 @@
 package net.minecraft.entity.item;
 
 import com.google.common.collect.Maps;
-import java.util.List;
-import java.util.Map;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockRailBase;
 import net.minecraft.block.BlockRailPowered;
@@ -20,7 +17,6 @@
 import net.minecraft.network.datasync.DataParameter;
 import net.minecraft.network.datasync.DataSerializers;
 import net.minecraft.network.datasync.EntityDataManager;
-import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.EntitySelectors;
 import net.minecraft.util.EnumFacing;
@@ -32,10 +28,20 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.IWorldNameable;
 import net.minecraft.world.World;
-import net.minecraft.world.WorldServer;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.Location;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.util.Vector;
 
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+
+// TODO: Improve compatibility between Forge and CraftBukkit variables
 public abstract class EntityMinecart extends Entity implements IWorldNameable
 {
     private static final DataParameter<Integer> ROLLING_AMPLITUDE = EntityDataManager.<Integer>createKey(EntityMinecart.class, DataSerializers.VARINT);
@@ -73,6 +79,17 @@
     protected float maxSpeedAirVertical = defaultMaxSpeedAirVertical;
     protected double dragAir = defaultDragAir;
 
+    // CraftBukkit start - Use Forge vars from above
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5;
+    private double derailedY = 0.5;
+    private double derailedZ = 0.5;
+    private double flyingX = dragAir;
+    private double flyingY = dragAir;
+    private double flyingZ = dragAir;
+    public double maxSpeed = 0.4D;
+    // CraftBukkit end
+
     public EntityMinecart(World worldIn)
     {
         super(worldIn);
@@ -162,6 +179,17 @@
             }
             else
             {
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.entity.Entity passenger = (source.getTrueSource() == null) ? null : source.getTrueSource().getBukkitEntity();
+
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, amount);
+                this.world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return true;
+                }
+
+                amount = (float) event.getDamage();
                 this.setRollingDirection(-this.getRollingDirection());
                 this.setRollingAmplitude(10);
                 this.markVelocityChanged();
@@ -170,6 +198,13 @@
 
                 if (flag || this.getDamage() > 40.0F)
                 {
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
+                    this.world.getServer().getPluginManager().callEvent(destroyEvent);
+
+                    if (destroyEvent.isCancelled()) {
+                        this.setDamage(40); // Maximize damage so this doesn't get triggered again right away
+                        return true;
+                    }
                     this.removePassengers();
 
                     if (flag && !this.hasCustomName())
@@ -228,6 +263,11 @@
 
     public void onUpdate()
     {
+        double prevX = this.posX;
+        double prevY = this.posY;
+        double prevZ = this.posZ;
+        float prevYaw = this.rotationYaw;
+        float prevPitch = this.rotationPitch;
         if (this.getRollingAmplitude() > 0)
         {
             this.setRollingAmplitude(this.getRollingAmplitude() - 1);
@@ -243,58 +283,6 @@
             this.outOfWorld();
         }
 
-        if (!this.world.isRemote && this.world instanceof WorldServer)
-        {
-            this.world.profiler.startSection("portal");
-            MinecraftServer minecraftserver = this.world.getMinecraftServer();
-            int i = this.getMaxInPortalTime();
-
-            if (this.inPortal)
-            {
-                if (minecraftserver.getAllowNether())
-                {
-                    if (!this.isRiding() && this.portalCounter++ >= i)
-                    {
-                        this.portalCounter = i;
-                        this.timeUntilPortal = this.getPortalCooldown();
-                        int j;
-
-                        if (this.world.provider.getDimensionType().getId() == -1)
-                        {
-                            j = 0;
-                        }
-                        else
-                        {
-                            j = -1;
-                        }
-
-                        this.changeDimension(j);
-                    }
-
-                    this.inPortal = false;
-                }
-            }
-            else
-            {
-                if (this.portalCounter > 0)
-                {
-                    this.portalCounter -= 4;
-                }
-
-                if (this.portalCounter < 0)
-                {
-                    this.portalCounter = 0;
-                }
-            }
-
-            if (this.timeUntilPortal > 0)
-            {
-                --this.timeUntilPortal;
-            }
-
-            this.world.profiler.endSection();
-        }
-
         if (this.world.isRemote)
         {
             if (this.turnProgress > 0)
@@ -381,6 +369,16 @@
             if (getCollisionHandler() != null) box = getCollisionHandler().getMinecartCollisionBox(this);
             else                               box = this.getEntityBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D);
 
+            org.bukkit.World bworld = this.world.getWorld();
+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            Location to = new Location(bworld, this.posX, this.posY, this.posZ, this.rotationYaw, this.rotationPitch);
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+            this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+            if (!from.equals(to)) {
+                this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+            }
             if (canBeRidden() && this.motionX * this.motionX + this.motionZ * this.motionZ > 0.01D)
             {
                 List<Entity> list = this.world.getEntitiesInAABBexcluding(this, box, EntitySelectors.getTeamCollisionPredicate(this));
@@ -393,10 +391,22 @@
 
                         if (!(entity1 instanceof EntityPlayer) && !(entity1 instanceof EntityIronGolem) && !(entity1 instanceof EntityMinecart) && !this.isBeingRidden() && !entity1.isRiding())
                         {
+                            VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                            this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                            if (collisionEvent.isCancelled()) {
+                                continue;
+                            }
                             entity1.startRiding(this);
                         }
                         else
                         {
+                            VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity1.getBukkitEntity());
+                            this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                            if (collisionEvent.isCancelled()) {
+                                continue;
+                            }
                             entity1.applyEntityCollision(this);
                         }
                     }
@@ -408,6 +418,12 @@
                 {
                     if (!this.isPassenger(entity) && entity.canBePushed() && entity instanceof EntityMinecart)
                     {
+                        VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
+                        this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                        if (collisionEvent.isCancelled()) {
+                            continue;
+                        }
                         entity.applyEntityCollision(this);
                     }
                 }
@@ -420,7 +436,8 @@
 
     protected double getMaximumSpeed()
     {
-        return 0.4D;
+        // return 0.4D;
+        return this.maxSpeed;
     }
 
     public void onActivatorRailPass(int x, int y, int z, boolean receivingPower)
@@ -446,18 +463,28 @@
 
         if (this.onGround)
         {
-            this.motionX *= 0.5D;
-            this.motionY *= 0.5D;
-            this.motionZ *= 0.5D;
+            // CraftBukkit start - replace magic numbers with our variables
+            // this.motionX *= 0.5D;
+            // this.motionY *= 0.5D;
+            // this.motionZ *= 0.5D;
+            this.motionX *= this.derailedX;
+            this.motionY *= this.derailedY;
+            this.motionZ *= this.derailedZ;
+            // CraftBukkit end
         }
 
         this.move(MoverType.SELF, this.motionX, moveY, this.motionZ);
 
         if (!this.onGround)
         {
-            this.motionX *= getDragAir();
-            this.motionY *= getDragAir();
-            this.motionZ *= getDragAir();
+            // CraftBukkit start - replace magic numbers with our variables
+            // this.motionX *= getDragAir();
+            // this.motionY *= getDragAir();
+            // this.motionZ *= getDragAir();
+            this.motionX *= this.flyingX;
+            this.motionY *= this.flyingY;
+            this.motionZ *= this.flyingZ;
+            // CraftBukkit end
         }
     }
 
@@ -668,7 +695,7 @@
 
     protected void applyDrag()
     {
-        if (this.isBeingRidden())
+        if (this.isBeingRidden() || !this.slowWhenEmpty)
         {
             this.motionX *= 0.996999979019165D;
             this.motionY *= 0.0D;
@@ -868,6 +895,12 @@
             {
                 if (!this.isPassenger(entityIn))
                 {
+                    VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent((Vehicle) this.getBukkitEntity(), entityIn.getBukkitEntity());
+                    this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                    if (collisionEvent.isCancelled()) {
+                        return;
+                    }
                     double d0 = entityIn.posX - this.posX;
                     double d1 = entityIn.posZ - this.posZ;
                     double d2 = d0 * d0 + d1 * d1;
@@ -1260,6 +1293,9 @@
     public void setDragAir(double value)
     {
         dragAir = value;
+        flyingX = dragAir;
+        flyingY = dragAir;
+        flyingZ = dragAir;
     }
 
     public double getSlopeAdjustment()
@@ -1322,4 +1358,26 @@
             }
         }
     }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+    public Vector getFlyingVelocityMod() {
+        return new Vector(flyingX, flyingY, flyingZ);
+    }
+
+    public void setFlyingVelocityMod(Vector flying) {
+        flyingX = flying.getX();
+        flyingY = flying.getY();
+        flyingZ = flying.getZ();
+    }
+
+    public Vector getDerailedVelocityMod() {
+        return new Vector(derailedX, derailedY, derailedZ);
+    }
+
+    public void setDerailedVelocityMod(Vector derailed) {
+        derailedX = derailed.getX();
+        derailedY = derailed.getY();
+        derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
 }
