--- ../src-base/minecraft/net/minecraftforge/items/VanillaInventoryCodeHooks.java
+++ ../src-work/minecraft/net/minecraftforge/items/VanillaInventoryCodeHooks.java
@@ -22,6 +22,7 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockDropper;
 import net.minecraft.block.BlockHopper;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.IHopper;
 import net.minecraft.tileentity.TileEntity;
@@ -31,8 +32,12 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
+import net.minecraftforge.cauldron.inventory.CraftCustomInventory;
 import org.apache.commons.lang3.tuple.ImmutablePair;
 import org.apache.commons.lang3.tuple.Pair;
+import org.bukkit.craftbukkit.v1_12_R1.inventory.CraftItemStack;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.inventory.Inventory;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -49,6 +54,8 @@
         Pair<IItemHandler, Object> itemHandlerResult = getItemHandler(dest, EnumFacing.UP);
         if (itemHandlerResult == null)
             return null;
+		if (itemHandlerResult.getValue() instanceof IInventory)
+			return null;
 
         IItemHandler handler = itemHandlerResult.getKey();
 
@@ -96,10 +103,20 @@
         {
             IItemHandler itemHandler = destinationResult.getKey();
             Object destination = destinationResult.getValue();
-            ItemStack dispensedStack = stack.copy().splitStack(1);
-            ItemStack remainder = putStackInInventoryAllSlots(dropper, destination, itemHandler, dispensedStack);
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(stack.copy().splitStack(1));
 
-            if (remainder.isEmpty())
+            TileEntity te = (TileEntity) destination;
+            Inventory destinationInventory = te.getOwner() != null ? te.getOwner().getInventory() : CraftCustomInventory.inventoryFromForge(itemHandler);
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(dropper.getOwner().getInventory(), oitemstack.clone(), destinationInventory, true);
+            if (destinationInventory != null) world.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return false;
+            }
+
+            ItemStack remainder = putStackInInventoryAllSlots(dropper, destination, itemHandler, CraftItemStack.asNMSCopy(event.getItem()));
+            if (event.getItem().equals(oitemstack) && remainder.isEmpty())
             {
                 remainder = stack.copy();
                 remainder.shrink(1);
@@ -140,13 +157,29 @@
                     if (!hopper.getStackInSlot(i).isEmpty())
                     {
                         ItemStack originalSlotContents = hopper.getStackInSlot(i).copy();
-                        ItemStack insertStack = hopper.decrStackSize(i, 1);
-                        ItemStack remainder = putStackInInventoryAllSlots(hopper, destination, itemHandler, insertStack);
+                        CraftItemStack remainder = CraftItemStack.asCraftMirror(hopper.decrStackSize(i, hopper.world.spigotConfig.hopperAmount)); // Spigot
 
-                        if (remainder.isEmpty())
+                        TileEntity te = (TileEntity) destination;
+                        Inventory destinationInventory = te.getOwner() != null ? te.getOwner().getInventory() : CraftCustomInventory.inventoryFromForge(itemHandler);
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(hopper.getOwner().getInventory(), remainder.clone(), destinationInventory, true);
+                        if (destinationInventory != null) hopper.getWorld().getServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            hopper.setInventorySlotContents(i, originalSlotContents);
+                            hopper.setTransferCooldown(hopper.world.spigotConfig.hopperTransfer); // Spigot
+                            return true;
+                        }
+                        int origCount = event.getItem().getAmount(); // Spigot
+                        ItemStack itemstack1 = putStackInInventoryAllSlots(hopper, destination, itemHandler, CraftItemStack.asNMSCopy(event.getItem()));
+                         if (itemstack1.isEmpty())
                         {
+                            if (event.getItem().equals(remainder)) {
+                                te.markDirty();
+                            } else {
+                                hopper.setInventorySlotContents(i, originalSlotContents);
+                            }
                             return true;
                         }
+                        originalSlotContents.shrink(origCount - itemstack1.getCount());
 
                         hopper.setInventorySlotContents(i, originalSlotContents);
                     }
