--- ../src-base/minecraft/net/minecraftforge/common/DimensionManager.java
+++ ../src-work/minecraft/net/minecraftforge/common/DimensionManager.java
@@ -19,46 +19,29 @@
 
 package net.minecraftforge.common;
 
-import java.io.File;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Hashtable;
-import java.util.IdentityHashMap;
-import java.util.List;
-import java.util.ListIterator;
-import java.util.Map;
-import java.util.concurrent.ConcurrentMap;
-
-import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
-import it.unimi.dsi.fastutil.ints.IntIterator;
-import it.unimi.dsi.fastutil.ints.IntLinkedOpenHashSet;
-import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
-import it.unimi.dsi.fastutil.ints.IntRBTreeSet;
-import it.unimi.dsi.fastutil.ints.IntSet;
-import it.unimi.dsi.fastutil.ints.IntSets;
-import it.unimi.dsi.fastutil.ints.IntSortedSet;
-
+import red.mohist.ForgeInjectBukkit;
+import red.mohist.Mohist;
+import red.mohist.i18n.Message;
 import com.google.common.collect.HashMultiset;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
 import com.google.common.collect.Multiset;
-
+import it.unimi.dsi.fastutil.ints.*;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.server.MinecraftServer;
-import net.minecraft.world.DimensionType;
-import net.minecraft.world.MinecraftException;
-import net.minecraft.world.World;
-import net.minecraft.world.ServerWorldEventHandler;
-import net.minecraft.world.WorldProvider;
-import net.minecraft.world.WorldServer;
-import net.minecraft.world.WorldServerMulti;
+import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.world.*;
+import net.minecraft.world.chunk.storage.AnvilSaveHandler;
 import net.minecraft.world.storage.ISaveHandler;
+import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.event.world.WorldEvent;
-import net.minecraftforge.fml.common.FMLLog;
+import org.bukkit.WorldCreator;
+import org.bukkit.generator.ChunkGenerator;
 
 import javax.annotation.Nullable;
+import java.io.File;
+import java.util.*;
+import java.util.concurrent.ConcurrentMap;
 
 public class DimensionManager
 {
@@ -83,6 +66,7 @@
     private static final IntSet usedIds = new IntOpenHashSet();
     private static final ConcurrentMap<World, World> weakWorldMap = new MapMaker().weakKeys().weakValues().makeMap();
     private static final Multiset<Integer> leakedWorlds = HashMultiset.create();
+    private static ArrayList<Integer> bukkitDims = new ArrayList<Integer>(); // used to keep track of Bukkit dimensions
 
     /**
      * Returns a list of dimensions associated with this DimensionType.
@@ -138,6 +122,11 @@
         {
             usedIds.add(id);
         }
+        // Mohist - register Environment to Bukkit
+        if (id != -1 && id != 0 && id != 1) // ignore vanilla
+        {
+            registerBukkitDimension(id, type.getName());
+        }
     }
 
     /**
@@ -187,17 +176,16 @@
                 int leakCount = leakedWorlds.count(System.identityHashCode(w));
                 if (leakCount == 5)
                 {
-                    FMLLog.log.debug("The world {} ({}) may have leaked: first encounter (5 occurrences).\n", Integer.toHexString(System.identityHashCode(w)), w.getWorldInfo().getWorldName());
+                    Mohist.LOGGER.debug("The world {} ({}) may have leaked: first encounter (5 occurrences).\n", Integer.toHexString(System.identityHashCode(w)), w.getWorldInfo().getWorldName());
                 }
                 else if (leakCount % 5 == 0)
                 {
-                    FMLLog.log.debug("The world {} ({}) may have leaked: seen {} times.\n", Integer.toHexString(System.identityHashCode(w)), w.getWorldInfo().getWorldName(), leakCount);
+                    Mohist.LOGGER.debug("The world {} ({}) may have leaked: seen {} times.\n", Integer.toHexString(System.identityHashCode(w)), w.getWorldInfo().getWorldName(), leakCount);
                 }
             }
         }
         return getIDs();
     }
-
     public static Integer[] getIDs()
     {
         return worlds.keySet().toArray(new Integer[0]); // Only loaded dims, since usually used to cycle through loaded worlds
@@ -209,14 +197,22 @@
         {
             worlds.put(id, world);
             weakWorldMap.put(world, world);
+            // handle all world adds here for Bukkit
+            if (!MinecraftServer.getServerInst().worldServerList.contains(world))
+            {
+                MinecraftServer.getServerInst().worldServerList.add(world);
+            }
             server.worldTickTimes.put(id, new long[100]);
-            FMLLog.log.info("Loading dimension {} ({}) ({})", id, world.getWorldInfo().getWorldName(), world.getMinecraftServer());
+            Object[] p = {id, world.getWorldInfo().getWorldName()};
+            Mohist.LOGGER.info(Message.getFormatString(Message.Load_dimension, p));
         }
         else
         {
+            MinecraftServer.getServerInst().worldServerList.remove(getWorld(id)); // Cauldron - remove world from our new world arraylist
             worlds.remove(id);
             server.worldTickTimes.remove(id);
-            FMLLog.log.info("Unloading dimension {}", id);
+            Object[] p = {id};
+            Mohist.LOGGER.info(Message.getFormatString(Message.UnLoad_dimension, p));
         }
 
         ArrayList<WorldServer> tmp = new ArrayList<WorldServer>();
@@ -253,16 +249,45 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.error("Cannot Hotload Dim: {}", dim, e);
+            Mohist.LOGGER.error("Cannot Hotload Dim: {}", dim);
             return; // If a provider hasn't been registered then we can't hotload the dim
         }
         MinecraftServer mcServer = overworld.getMinecraftServer();
         ISaveHandler savehandler = overworld.getSaveHandler();
-        //WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
+        WorldSettings worldSettings = new WorldSettings(overworld.getWorldInfo());
+        String worldType;
+        String name;
+        org.bukkit.World.Environment env = org.bukkit.World.Environment.getEnvironment(dim);
+        if (dim >= -1 && dim <= 1)
+        {
+            if ((dim == -1 && !mcServer.getAllowNether()) || (dim == 1 && !mcServer.server.getAllowEnd()))
+                return;
+            worldType = env.toString().toLowerCase();
+            name = "DIM" + dim;
+        } else {
+            WorldProvider provider = WorldProvider.getProviderForDimension(dim);
+            worldType = provider.getClass().getSimpleName().toLowerCase();
+            worldType = worldType.replace("worldprovider", "");
+            worldType = worldType.replace("provider", "");
 
-        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, savehandler, dim, overworld, mcServer.profiler).init()));
+            if(org.bukkit.World.Environment.getEnvironment(DimensionManager.getProviderType(dim).getId()) == null){
+                env = DimensionManager.registerBukkitDimension(DimensionManager.getProviderType(dim).getId(), worldType);
+            }
+
+            name = provider.getSaveFolder();
+        }
+
+        ChunkGenerator gen = mcServer.server.getGenerator(name);
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+        WorldInfo worldInfo = new WorldInfo(worldSettings, name);
+        WorldServer world = (dim == 0 ? overworld : (WorldServer)(new WorldServerMulti(mcServer, new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer()), dim, overworld, mcServer.profiler, worldInfo, env, gen).init()));
+
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
         world.addEventListener(new ServerWorldEventHandler(mcServer, world));
         MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        mcServer.server.getPluginManager().callEvent(new org.bukkit.event.world.WorldLoadEvent(world.getWorld()));
         if (!mcServer.isSinglePlayer())
         {
             world.getWorldInfo().setGameType(mcServer.getGameType());
@@ -303,7 +328,6 @@
     {
         return dimensions.keySet().toArray(new Integer[0]);
     }
-
     public static WorldProvider createProviderFor(int dim)
     {
         try
@@ -321,7 +345,7 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.error("An error occurred trying to create an instance of WorldProvider {} ({})",
+            Mohist.LOGGER.error("An error occurred trying to create an instance of WorldProvider {} ({})",
                     dim, getProviderType(dim), e);
             throw new RuntimeException(e);
         }
@@ -357,7 +381,7 @@
 
         if (unloadQueue.add(id))
         {
-            FMLLog.log.debug("Queueing dimension {} to unload", id);
+            Mohist.LOGGER.debug("Queueing dimension {} to unload", id);;
         }
     }
 
@@ -387,23 +411,10 @@
             // Don't unload the world if the status changed
             if (w == null || !canUnloadWorld(w))
             {
-                FMLLog.log.debug("Aborting unload for dimension {} as status changed", id);
+                Mohist.LOGGER.debug("Aborting unload for dimension {} as status changed", id);
                 continue;
             }
-            try
-            {
-                w.saveAllChunks(true, null);
-            }
-            catch (MinecraftException e)
-            {
-                FMLLog.log.error("Caught an exception while saving all chunks:", e);
-            }
-            finally
-            {
-                MinecraftForge.EVENT_BUS.post(new WorldEvent.Unload(w));
-                w.flush();
-                setWorld(id, null, w.getMinecraftServer());
-            }
+            MinecraftServer.getServerInst().server.unloadWorld(w.getWorld(), true); // Cauldron - unload through our new method for simplicity
         }
     }
 
@@ -499,4 +510,109 @@
             return null;
         }
     }
+
+    // Cauldron start - new method for handling creation of Bukkit dimensions. Currently supports MultiVerse
+    public static WorldServer initDimension(WorldCreator creator, WorldSettings worldSettings) {
+        WorldServer overworld = getWorld(0);
+        if (overworld == null) {
+            throw new RuntimeException("Cannot Hotload Dim: Overworld is not Loaded!");
+        }
+
+        MinecraftServer mcServer = overworld.getMinecraftServer();
+
+        String name;
+
+        DimensionType type = DimensionType.OVERWORLD;
+        try {
+            if (creator.environment() != null)
+                type = DimensionType.getById(creator.environment().getId());
+        }
+        catch (IllegalArgumentException e)
+        {
+            // do nothing
+        }
+
+        org.bukkit.World.Environment env = creator.environment();
+        name = creator.name();
+        int dim = 0;
+        // Use saved dimension from level.dat if it exists. This guarantees that after a world is created, the same dimension will be used. Fixes issues with MultiVerse
+        AnvilSaveHandler saveHandler = new AnvilSaveHandler(mcServer.server.getWorldContainer(), name, true, mcServer.getDataFixer());
+
+        if (saveHandler.loadWorldInfo() != null)
+        {
+            int savedDim = saveHandler.loadWorldInfo().getDimension();
+            if (savedDim != 0 && savedDim != -1 && savedDim != 1)
+            {
+                dim = savedDim;
+            }
+        }
+        if (dim == 0)
+        {
+            dim = getNextFreeDimId();
+        }
+
+        if (!isDimensionRegistered(dim)) // handle reloads properly
+        {
+            registerDimension(dim, type);
+            addBukkitDimension(dim);
+        }
+        ChunkGenerator gen = creator.generator();
+        if (mcServer instanceof DedicatedServer) {
+            worldSettings.setGeneratorOptions(((DedicatedServer) mcServer).getStringProperty("generator-settings", ""));
+        }
+
+        WorldInfo worldinfo = saveHandler.loadWorldInfo();
+        if (worldinfo == null) {
+            worldinfo = new WorldInfo(worldSettings,name);
+        }
+
+        WorldServer world = (WorldServer) new WorldServerMulti(mcServer, saveHandler, dim, overworld, mcServer.profiler, worldinfo, env, gen).init();
+        world.initialize(worldSettings);
+
+        world.provider.setDimension(dim); // Fix for TerrainControl injecting their own WorldProvider
+        mcServer.getPlayerList().setPlayerManager(mcServer.worldServerList.toArray(new WorldServer[mcServer.worldServerList.size()]));
+
+        world.addEventListener(new ServerWorldEventHandler(mcServer, world));
+        MinecraftForge.EVENT_BUS.post(new WorldEvent.Load(world));
+        if (!mcServer.isSinglePlayer())
+        {
+            world.getWorldInfo().setGameType(mcServer.getGameType());
+        }
+
+        return world;
+
+    }
+
+    public static org.bukkit.World.Environment registerBukkitDimension(int dim, String worldType) {
+        org.bukkit.World.Environment env = org.bukkit.World.Environment.getEnvironment(dim);
+        if(env == null){
+            worldType = worldType.replace("WorldProvider","");
+            env = ForgeInjectBukkit.addBukkitEnvironment(dim,worldType.toUpperCase());
+            org.bukkit.World.Environment.registerEnvironment(env);
+        }
+        return env;
+    }
+
+    public static void addBukkitDimension(int dim)
+    {
+        if (!bukkitDims.contains(dim))
+            bukkitDims.add(dim);
+    }
+
+    public static void removeBukkitDimension(int dim)
+    {
+        if (bukkitDims.contains(dim))
+            bukkitDims.remove(bukkitDims.indexOf(dim));
+    }
+
+    public static ArrayList<Integer> getBukkitDimensionIDs()
+    {
+        return bukkitDims;
+    }
+
+    public static boolean isBukkitDimension(int dim)
+    {
+        return bukkitDims.contains(dim);
+    }
+    // Cauldron end
 }
